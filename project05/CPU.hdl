// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected straight away by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	// A-instructions
	Not(in=instruction[15], out=immediate);
	
	// Output saving
	Or(a=instruction[15], out=Ctype); // alias instruction[15] as Ctype for C-instructions
	Or(a=immediate, b=instruction[5], out=loadA); // load a if a-flag set or an A-instruction
	And(a=Ctype, b=instruction[4], out=loadD); // load d if d-flag and C-type
	And(a=Ctype, b=instruction[3], out=writeM); // load memory if m-flag and C-type
	
	// Determine Jump
	Or(a=zr, b=ng, out=leq); // determine if result <=0
	Not(in=leq, out=pos);
	And(a=instruction[0], b=pos, out=j3); //j3 flag
	And(a=instruction[1], b=zr, out=j2); // j2 flag
	And(a=instruction[2], b=ng, out=j1); // j1 flag
	Or8Way(in[0]=j1, in[1]=j2, in[2]=j3, out=j4); // check if any flag was matched
	And(a=Ctype, b=j4, out=dojump);
		
	// loading A
	Mux16(a=instruction, b=result, sel=instruction[15], out=DataIntoA);
	ARegister(in=DataIntoA, load=loadA, out=A, out[0..14]=addressM);
	
	// D, PC and ALU
	DRegister(in=result, load=loadD, out=D);
	Not(out=inc);
	PC(in=A, load=dojump, inc=inc, reset=reset, out[0..14]=pc);
	
	// A-flag
	Mux16(a=A, b=inM, sel=instruction[12], out=AM);
	
	// 
	ALU(x=AM, y=D, out=result, out=outM, zy=instruction[11], ny=instruction[10], zx=instruction[9], nx=instruction[8], f=instruction[7], no=instruction[6], zr=zr, ng=ng);
	
}