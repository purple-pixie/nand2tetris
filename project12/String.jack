// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field int maxLength;
    field Array data;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int max_length) {
        if (maxLength < 0)
        {
            do Sys.error(14); // error 14	String.new	Maximum length must be non-negative
        }
        let length = 0;
        if (max_length > 0) {
            let data = Array.new(max_length);
        }
        let maxLength = max_length;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLength > 0) { do Memory.deAlloc(data); }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }


    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j < length))
        {
            do Sys.error(15); // error 15	String.charAt	String index out of bounds
        }
        return data[j];
    }


    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < length)
        {
            let data[j] = c;
        }
        else {
            do Sys.error(16); // error 16	String.setCharAt	String index out of bounds
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = maxLength)
        {
            do Sys.error(17); // error 17	String.appendChar	String is full
        }
        let data[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18); // 18	String.eraseLastChar	String is empty
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i, digit;
        var boolean is_neg;

        let value = 0;
        // if it starts with a -, set the neg flag and start at the 2nd character
        if (data[0] = 45)
        {
            let is_neg = true;
            let i = 1;
        }
        else
        {
            let is_neg = false;
            let i = 0;
        }

        while (i < length) {
            let digit = data[i] - 48;
            // if we've hit a non-digit, stop calculating
            if ( (digit < 0) | (digit > 9) ) { let i = length; }
            else { let value = (value * 10) + digit; }
            let i = i + 1;
        }
        if (is_neg) { return -value; }
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if (maxLength = 0)
        {
            do Sys.error(19); // 19	String.setInt	Insufficient string capacity
        }
        let length = 0;
        if (val < 0)
        {
            do appendChar(45);
            do addDigits(-val);
        }
         else {do addDigits(val); }
        return;
    }

    /** recursively add digits of val to the string*/
    method void addDigits(int val)
    {
        var int digit, val_over_10;
        var char c;

        if (length = maxLength)
        {
            do Sys.error(19); // 19	String.setInt	Insufficient string capacity
        }

        let val_over_10 = val / 10;
        // digit = val % 10
        let digit = val - (10 * val_over_10);
        if (val < 10)
        {
            do appendChar(digit + 48);
        }
        else
        {
            do addDigits(val_over_10);
            do appendChar(digit + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
